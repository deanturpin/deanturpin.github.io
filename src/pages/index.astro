---
import { marked } from 'marked';
import fs from 'fs';
import path from 'path';

const title = "Dean Turpin";

// Generate build timestamp
const buildTime = new Date().toISOString();

// Read README.md content
const readmePath = path.join(process.cwd(), 'README.md');
const readmeContent = fs.readFileSync(readmePath, 'utf-8');

// Skip the first heading (it's redundant with our page title)
const contentWithoutTitle = readmeContent.replace(/^#\s+.*\n/, '');

// Convert markdown to HTML
const htmlContent = marked(contentWithoutTitle);
---

<html lang="en">
	<head>
		<meta charset="utf-8" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="viewport" content="width=device-width" />
		<meta name="generator" content={Astro.generator} />
		<title>{title}</title>
		<style>
			/* Warm Sunset theme */
			@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');

			body {
				font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
				line-height: 1.7;
				color: #2d1b69;
				max-width: 900px;
				margin: 0 auto;
				padding: 3rem 2rem;
				background: linear-gradient(135deg, #667eea 0%, #764ba2 50%, #f093fb 100%);
				min-height: 100vh;
				position: relative;
			}

			body::before {
				content: '';
				position: fixed;
				top: 0;
				left: 0;
				width: 100%;
				height: 100%;
				background: url("data:image/svg+xml,%3Csvg width='60' height='60' viewBox='0 0 60 60' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cg fill='%23ffffff' fill-opacity='0.05'%3E%3Ccircle cx='30' cy='30' r='2'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E") repeat;
				pointer-events: none;
				z-index: 1;
			}

			* {
				position: relative;
				z-index: 2;
			}

			h1 {
				color: #fff;
				font-size: 3.5rem;
				font-weight: 700;
				margin-bottom: 1rem;
				text-align: center;
				background: linear-gradient(135deg, #ff6b6b, #ffa726, #ffcc02);
				-webkit-background-clip: text;
				-webkit-text-fill-color: transparent;
				background-clip: text;
				filter: drop-shadow(0 4px 6px rgba(0, 0, 0, 0.3));
				animation: float 6s ease-in-out infinite;
			}

			@keyframes float {
				0%, 100% { transform: translateY(0px); }
				50% { transform: translateY(-10px); }
			}

			.build-timestamp {
				color: rgba(255, 255, 255, 0.8);
				font-size: 0.9rem;
				text-align: center;
				margin-bottom: 2rem;
				font-weight: 300;
				font-style: italic;
			}

			h2 {
				color: #fff;
				margin-top: 3rem;
				margin-bottom: 1.5rem;
				font-size: 1.8rem;
				font-weight: 600;
				text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
				position: relative;
			}

			h2::after {
				content: '';
				position: absolute;
				bottom: -8px;
				left: 0;
				width: 80px;
				height: 4px;
				background: linear-gradient(90deg, #ff6b6b, #ffa726);
				border-radius: 2px;
				box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
			}

			a {
				color: #fff;
				text-decoration: none;
				transition: all 0.3s ease;
				font-weight: 500;
				border-bottom: 1px solid transparent;
			}

			a:hover {
				color: #ffcc02;
				border-bottom: 1px solid #ffcc02;
				text-shadow: 0 0 8px rgba(255, 204, 2, 0.6);
				transform: translateY(-1px);
			}

			table {
				width: 100%;
				border-collapse: collapse;
				margin: 2rem 0;
				background: rgba(255, 255, 255, 0.95);
				border-radius: 16px;
				overflow: hidden;
				box-shadow: 0 20px 40px rgba(0, 0, 0, 0.2);
				backdrop-filter: blur(10px);
			}

			th, td {
				text-align: left;
				padding: 1.2rem;
				border-bottom: 1px solid rgba(255, 255, 255, 0.2);
			}

			th {
				background: linear-gradient(135deg, #ff6b6b, #ffa726);
				font-weight: 600;
				color: #fff;
				text-shadow: 0 1px 2px rgba(0, 0, 0, 0.2);
			}

			tr:hover {
				background: rgba(255, 204, 2, 0.1);
				transform: scale(1.01);
				transition: all 0.2s ease;
			}

			ul {
				padding-left: 1.5rem;
			}

			li {
				margin: 0.6rem 0;
				color: #fff;
				text-shadow: 0 1px 2px rgba(0, 0, 0, 0.2);
			}

			img {
				max-width: 100%;
				height: auto;
				border-radius: 8px;
				box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
			}

			code {
				background: rgba(255, 255, 255, 0.9);
				padding: 0.2rem 0.4rem;
				border-radius: 4px;
				font-size: 0.9em;
				color: #2d1b69;
			}

			.pipeline-badges {
				display: flex;
				flex-wrap: wrap;
				gap: 12px;
				margin: 2rem 0;
				padding: 2rem;
				background: rgba(255, 255, 255, 0.1);
				border-radius: 16px;
				backdrop-filter: blur(10px);
				box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
			}

			.pipeline-badges img {
				border-radius: 6px;
				transition: all 0.3s ease;
				filter: brightness(1.1) saturate(1.2);
			}

			.pipeline-badges img:hover {
				transform: scale(1.1) rotate(2deg);
				box-shadow: 0 8px 16px rgba(0, 0, 0, 0.3);
			}

			/* Floating particles effect */
			body::after {
				content: '';
				position: fixed;
				top: 0;
				left: 0;
				width: 100%;
				height: 100%;
				background: radial-gradient(circle at 20% 80%, rgba(255, 107, 107, 0.3) 0%, transparent 50%),
				           radial-gradient(circle at 80% 20%, rgba(255, 167, 38, 0.3) 0%, transparent 50%),
				           radial-gradient(circle at 40% 40%, rgba(255, 204, 2, 0.2) 0%, transparent 50%);
				pointer-events: none;
				z-index: 1;
				animation: drift 20s ease-in-out infinite;
			}

			@keyframes drift {
				0%, 100% {
					transform: translate(0px, 0px) scale(1);
				}
				33% {
					transform: translate(30px, -30px) scale(1.1);
				}
				66% {
					transform: translate(-20px, 20px) scale(0.9);
				}
			}

			.theme-switcher {
				position: fixed;
				top: 20px;
				right: 20px;
				z-index: 1000;
				background: rgba(255, 255, 255, 0.9);
				padding: 10px;
				border-radius: 8px;
				box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
				backdrop-filter: blur(10px);
			}

			.theme-switcher label {
				color: #333;
				font-size: 0.9rem;
				margin-right: 8px;
			}

			.theme-switcher select {
				padding: 5px;
				border: 1px solid #ddd;
				border-radius: 4px;
				background: white;
				color: #333;
			}

			/* Special handling for pipeline badges section */
			h2:has(+ p > a[href*="gitlab.com"]) + p {
				display: none;
			}

			h2:has(+ p > a[href*="gitlab.com"]) ~ p:has(a[href*="gitlab.com"]) {
				margin: 0;
				padding: 0;
			}

			h2:has(+ p > a[href*="gitlab.com"]) ~ p > a[href*="gitlab.com"] {
				display: inline-block;
				margin: 0.5rem;
			}

			@media (max-width: 600px) {
				body {
					padding: 2rem 1rem;
				}
				h1 {
					font-size: 2.5rem;
				}
				table {
					font-size: 0.9rem;
				}
				th, td {
					padding: 0.8rem;
				}
				.theme-switcher {
					top: 10px;
					right: 10px;
					padding: 8px;
				}
			}
		</style>
	</head>
	<body>
		<div class="theme-switcher">
			<label for="theme-select">Theme:</label>
			<select id="theme-select">
				<option value="sunset">Warm Sunset</option>
				<option value="minimal">Clean Minimal</option>
				<option value="dark">Soft Dark</option>
				<option value="classic">Classic</option>
			</select>
		</div>
		<h1>{title}</h1>
		<div class="build-timestamp">Built: {new Date(buildTime).toLocaleString('en-GB', {
			timeZone: 'Europe/London',
			year: 'numeric',
			month: 'short',
			day: 'numeric',
			hour: '2-digit',
			minute: '2-digit',
			timeZoneName: 'short'
		})}</div>
		<div set:html={htmlContent} />

		<script>
			// Theme definitions
			const themes = {
				sunset: {
					'--bg': 'linear-gradient(135deg, #667eea 0%, #764ba2 50%, #f093fb 100%)',
					'--text': '#2d1b69',
					'--heading': '#fff',
					'--accent': '#ffcc02',
					'--table-bg': 'rgba(255, 255, 255, 0.95)'
				},
				minimal: {
					'--bg': '#fafbfc',
					'--text': '#2c3e50',
					'--heading': '#1a252f',
					'--accent': '#3498db',
					'--table-bg': '#fff'
				},
				dark: {
					'--bg': '#1e293b',
					'--text': '#e2e8f0',
					'--heading': '#f1f5f9',
					'--accent': '#60a5fa',
					'--table-bg': 'rgba(30, 41, 59, 0.8)'
				},
				classic: {
					'--bg': '#fff',
					'--text': '#333',
					'--heading': '#000',
					'--accent': '#0066cc',
					'--table-bg': '#f9f9f9'
				}
			};

			// Apply theme
			function applyTheme(themeName) {
				const theme = themes[themeName];
				const root = document.documentElement;

				// Remove all animations and gradients for non-sunset themes
				if (themeName !== 'sunset') {
					root.style.setProperty('--bg', theme['--bg']);
					document.body.style.background = theme['--bg'];
					document.body.style.animation = 'none';

					// Remove pseudo-elements for other themes
					const style = document.createElement('style');
					style.innerHTML = `
						body::before, body::after { display: none !important; }
						h1 {
							background: none !important;
							-webkit-text-fill-color: initial !important;
							color: ${theme['--heading']} !important;
							animation: none !important;
							filter: none !important;
						}
						h2::after { background: ${theme['--accent']} !important; }
						a { color: ${theme['--accent']} !important; }
						a:hover { color: ${theme['--accent']} !important; text-shadow: none !important; }
						table { background: ${theme['--table-bg']} !important; }
						li { color: ${theme['--text']} !important; text-shadow: none !important; }
						h2 { color: ${theme['--heading']} !important; text-shadow: none !important; }
						code { color: ${theme['--text']} !important; }
						.build-timestamp { color: ${theme['--text']} !important; opacity: 0.7; }
					`;
					document.head.appendChild(style);
				} else {
					// Restore sunset theme by removing override styles
					const overrides = document.querySelectorAll('style');
					overrides.forEach(style => {
						if (style.innerHTML.includes('body::before')) {
							style.remove();
						}
					});
					location.reload(); // Easiest way to restore all sunset animations
				}
			}

			// Theme switcher functionality
			document.getElementById('theme-select').addEventListener('change', (e) => {
				applyTheme(e.target.value);
				localStorage.setItem('selectedTheme', e.target.value);
			});

			// Load saved theme
			const savedTheme = localStorage.getItem('selectedTheme') || 'sunset';
			document.getElementById('theme-select').value = savedTheme;
			if (savedTheme !== 'sunset') {
				applyTheme(savedTheme);
			}

			// Wrap pipeline badges in a container
			document.addEventListener('DOMContentLoaded', () => {
				const pipesHeading = Array.from(document.querySelectorAll('h2')).find(h => h.textContent === 'Pipes');
				if (pipesHeading) {
					const badges = [];
					let nextElement = pipesHeading.nextElementSibling;

					while (nextElement && nextElement.tagName === 'P') {
						const links = nextElement.querySelectorAll('a[href*="gitlab.com"]');
						links.forEach(link => {
							if (link.querySelector('img')) {
								badges.push(link.cloneNode(true));
							}
						});
						const toRemove = nextElement;
						nextElement = nextElement.nextElementSibling;
						toRemove.remove();
					}

					if (badges.length > 0) {
						const container = document.createElement('div');
						container.className = 'pipeline-badges';
						badges.forEach(badge => container.appendChild(badge));
						pipesHeading.after(container);
					}
				}
			});
		</script>
	</body>
</html>